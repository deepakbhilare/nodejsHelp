{
    "$val": {
        "links": [
            {
                "remote_url": "http://localhost"
            },
            {
                "file_url": "file://documents"
            },
            {
                "remote_url": "https://blahblah.com"
            }
        ],
        "preview": "https://image",
        "metadata": "This is a link collection"
    },
    "$selected": [
        {
            "index": 0,
            "key": "remote_url",
            "path": "[\"links\"][0]",
            "object": {
                "remote_url": "http://localhost"
            },
            "value": "http://localhost"
        },
        {
            "index": 1,
            "key": "remote_url",
            "path": "[\"links\"][2]",
            "object": {
                "remote_url": "https://blahblah.com"
            },
            "value": "https://blahblah.com"
        },
        {
            "index": 2,
            "key": "preview",
            "path": "",
            "object": {
                "links": [
                    {
                        "remote_url": "http://localhost"
                    },
                    {
                        "file_url": "file://documents"
                    },
                    {
                        "remote_url": "https://blahblah.com"
                    }
                ],
                "preview": "https://image",
                "metadata": "This is a link collection"
            },
            "value": "https://image"
        }
    ],
    "$injected": [],
    "$progress": true,
    "exec": "(function(current, path, filter) {\n      // if current matches the pattern, put it in the selected array\n      if (typeof current === 'string') {\n        // leaf node should be ignored\n        // we're lookin for keys only\n      } else if (Helper.is_array(current)) {\n        for (var i=0; i<current.length; i++) {\n          SELECT.exec(current[i], path+'['+i+']', filter);\n        }\n      } else {\n        // object\n        for (var key in current) {\n          // '$root' is a special key that links to the root node\n          // so shouldn't be used to iterate\n          if (key !== '$root') {\n            if (filter(key, current[key])) {\n              var index = SELECT.$selected.length;\n              SELECT.$selected.push({\n                index: index,\n                key: key,\n                path: path,\n                object: current,\n                value: current[key],\n              });\n            }\n            SELECT.exec(current[key], path+'[\"'+key+'\"]', filter);\n          }\n        }\n      }\n    })",
    "inject": "(function(obj, serialized) {\n      SELECT.$injected = obj;\n      try {\n        if (serialized) SELECT.$injected = JSON.parse(obj);\n      } catch (error) { }\n\n      if (Object.keys(SELECT.$injected).length > 0) {\n        SELECT.select(SELECT.$injected);\n      }\n      return SELECT;\n    })",
    "select": "(function(obj, filter, serialized) {\n      // iterate '$selected'\n      //\n      /*\n      SELECT.$selected = [{\n        value {\n          '{{#include}}': {\n            '{{#each items}}': {\n              'type': 'label',\n              'text': '{{name}}'\n            }\n          }\n        },\n        path: '$jason.head.actions.$load'\n        ...\n      }]\n      */\n      var json = obj;\n      try {\n        if (serialized) json = JSON.parse(obj);\n      } catch (error) { }\n\n      if (filter) {\n        SELECT.$selected = [];\n        SELECT.exec(json, '', filter);\n      } else {\n        SELECT.$selected = null;\n      }\n\n      if (json && (Helper.is_array(json) || typeof json === 'object')) {\n        if (!SELECT.$progress) {\n          // initialize\n          if (Helper.is_array(json)) {\n            SELECT.$val = [];\n            SELECT.$selected_root = [];\n          } else {\n            SELECT.$val = {};\n            SELECT.$selected_root = {};\n          }\n        }\n        Object.keys(json).forEach(function(key) {\n        //for (var key in json) {\n          SELECT.$val[key] = json[key];\n          SELECT.$selected_root[key] = json[key];\n        });\n      } else {\n        SELECT.$val = json;\n        SELECT.$selected_root = json;\n      }\n      SELECT.$progress = true; // set the 'in progress' flag\n\n      return SELECT;\n    })",
    "transformWith": "(function(obj, serialized) {\n      SELECT.$parsed = [];\n      SELECT.$progress = null;\n      /*\n      *  'selected' is an array that contains items that looks like this:\n      *  {\n      *    key: The selected key,\n      *    path: The path leading down to the selected key,\n      *    object: The entire object that contains the currently selected key/val pair\n      *    value: The selected value\n      *  }\n      */\n      var template = obj;\n      try {\n        if (serialized) template = JSON.parse(obj);\n      } catch (error) { }\n\n      // Setting $root\n      SELECT.$template_root = template;\n      String.prototype.$root = SELECT.$selected_root;\n      Number.prototype.$root = SELECT.$selected_root;\n      Function.prototype.$root = SELECT.$selected_root;\n      Array.prototype.$root = SELECT.$selected_root;\n      Boolean.prototype.$root = SELECT.$selected_root;\n      root = SELECT.$selected_root;\n      // generate new $selected_root\n      if (SELECT.$selected && SELECT.$selected.length > 0) {\n        SELECT.$selected.sort(function(a, b) {\n          // sort by path length, so that deeper level items will be replaced first\n          // TODO: may need to look into edge cases\n          return b.path.length - a.path.length;\n        }).forEach(function(selection) {\n        //SELECT.$selected.forEach(function(selection) {\n          // parse selected\n          var parsed_object = TRANSFORM.run(template, selection.object);\n\n          // apply the result to root\n          SELECT.$selected_root = Helper.resolve(SELECT.$selected_root, selection.path, parsed_object);\n\n          // update selected object with the parsed result\n          selection.object = parsed_object;\n        });\n        SELECT.$selected.sort(function(a, b) {\n          return a.index - b.index;\n        });\n      } else {\n        var parsed_object = TRANSFORM.run(template, SELECT.$selected_root);\n        // apply the result to root\n        SELECT.$selected_root = Helper.resolve(SELECT.$selected_root, '', parsed_object);\n      }\n      delete String.prototype.$root;\n      delete Number.prototype.$root;\n      delete Function.prototype.$root;\n      delete Array.prototype.$root;\n      delete Boolean.prototype.$root;\n      return SELECT;\n    })",
    "transform": "(function(obj, serialized) {\n      SELECT.$parsed = [];\n      SELECT.$progress = null;\n      /*\n      'selected' is an array that contains items that looks like this:\n\n      {\n        key: The selected key,\n        path: The path leading down to the selected key,\n        object: The entire object that contains the currently selected key/val pair\n        value: The selected value\n      }\n      */\n      var data = obj;\n      try {\n        if (serialized) data = JSON.parse(obj);\n      } catch (error) { }\n\n      // since we're assuming that the template has been already selected, the $template_root is $selected_root\n      SELECT.$template_root = SELECT.$selected_root;\n\n      String.prototype.$root = data;\n      Number.prototype.$root = data;\n      Function.prototype.$root = data;\n      Array.prototype.$root = data;\n      Boolean.prototype.$root = data;\n      root = data;\n\n      if (SELECT.$selected && SELECT.$selected.length > 0) {\n        SELECT.$selected.sort(function(a, b) {\n          // sort by path length, so that deeper level items will be replaced first\n          // TODO: may need to look into edge cases\n          return b.path.length - a.path.length;\n        }).forEach(function(selection) {\n          // parse selected\n          var parsed_object = TRANSFORM.run(selection.object, data);\n          // apply the result to root\n          SELECT.$template_root = Helper.resolve(SELECT.$template_root, selection.path, parsed_object);\n          SELECT.$selected_root = SELECT.$template_root;\n\n          // update selected object with the parsed result\n          selection.object = parsed_object;\n        });\n        SELECT.$selected.sort(function(a, b) {\n          return a.index - b.index;\n        });\n      } else {\n        var parsed_object = TRANSFORM.run(SELECT.$selected_root, data);\n        // apply the result to root\n        SELECT.$template_root = Helper.resolve(SELECT.$template_root, '', parsed_object);\n        SELECT.$selected_root = SELECT.$template_root;\n      }\n      delete String.prototype.$root;\n      delete Number.prototype.$root;\n      delete Function.prototype.$root;\n      delete Array.prototype.$root;\n      delete Boolean.prototype.$root;\n      return SELECT;\n    })",
    "objects": "(function() {\n      SELECT.$progress = null;\n      if (SELECT.$selected) {\n        return SELECT.$selected.map(function(item) { return item.object; });\n      } else {\n        return [SELECT.$selected_root];\n      }\n    })",
    "keys": "(function() {\n      SELECT.$progress = null;\n      if (SELECT.$selected) {\n        return SELECT.$selected.map(function(item) { return item.key; });\n      } else {\n        if (Array.isArray(SELECT.$selected_root)) {\n          return Object.keys(SELECT.$selected_root).map(function(key) { return parseInt(key); });\n        } else {\n          return Object.keys(SELECT.$selected_root);\n        }\n      }\n    })",
    "paths": "(function() {\n      SELECT.$progress = null;\n      if (SELECT.$selected) {\n        return SELECT.$selected.map(function(item) { return item.path; });\n      } else {\n        if (Array.isArray(SELECT.$selected_root)) {\n          return Object.keys(SELECT.$selected_root).map(function(item) {\n            // key is integer\n            return '[' + item + ']';\n          });\n        } else {\n          return Object.keys(SELECT.$selected_root).map(function(item) {\n            // key is string\n            return '[\"' + item + '\"]';\n          });\n        }\n      }\n    })",
    "values": "(function() {\n      SELECT.$progress = null;\n      if (SELECT.$selected) {\n        return SELECT.$selected.map(function(item) { return item.value; });\n      } else {\n        return Object.values(SELECT.$selected_root);\n      }\n    })",
    "root": "(function() {\n      SELECT.$progress = null;\n      return SELECT.$selected_root;\n    })",
    "$selected_root": {
        "links": [
            {
                "remote_url": "http://localhost"
            },
            {
                "file_url": "file://documents"
            },
            {
                "remote_url": "https://blahblah.com"
            }
        ],
        "preview": "https://image",
        "metadata": "This is a link collection"
    }
}